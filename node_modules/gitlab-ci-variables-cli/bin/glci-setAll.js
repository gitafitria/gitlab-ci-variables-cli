#!/usr/bin/env node
'use strict';

var _bluebird = require('bluebird');

let execute = (() => {
  var _ref = (0, _bluebird.coroutine)(function* (cmd) {
    const conf = yield (0, _utils.getConf)();

    const properties = (0, _utils.getProperties)();
    const handler = (0, _gitlabCi2.default)(conf.url, conf.token);
    const resp = yield handler.setVariables(properties, !cmd.doNotForce);

    console.log('Completed setting variables on Gitlab CI.');
    return resp;
  });

  return function execute(_x) {
    return _ref.apply(this, arguments);
  };
})();

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _utils = require('./lib/utils');

var _gitlabCi = require('./lib/gitlab-ci');

var _gitlabCi2 = _interopRequireDefault(_gitlabCi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander2.default.description('Read all key/value pairs under gitlab.env.yml on the current directory and sets them as environment variables on Gitlab CI').option('--url <url>', 'Your Gitlab project URL, e.g. https://gitlab.com/gitlab-org/gitlab-ce').option('--token <token>', 'Your Gitlab token').option('--do-not-force', 'Ignore variables if they already exist on gitlab CI. By default all variables are overridden').parse(process.argv);

execute(_commander2.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nbGNpLXNldEFsbC5qcyJdLCJuYW1lcyI6WyJjbWQiLCJjb25mIiwicHJvcGVydGllcyIsImhhbmRsZXIiLCJ1cmwiLCJ0b2tlbiIsInJlc3AiLCJzZXRWYXJpYWJsZXMiLCJkb05vdEZvcmNlIiwiY29uc29sZSIsImxvZyIsImV4ZWN1dGUiLCJkZXNjcmlwdGlvbiIsIm9wdGlvbiIsInBhcnNlIiwicHJvY2VzcyIsImFyZ3YiXSwibWFwcGluZ3MiOiI7Ozs7O3NDQU1BLFdBQXVCQSxHQUF2QixFQUE0QjtBQUMxQixVQUFNQyxPQUFPLE1BQU0scUJBQW5COztBQUVBLFVBQU1DLGFBQWEsMkJBQW5CO0FBQ0EsVUFBTUMsVUFBVSx3QkFBU0YsS0FBS0csR0FBZCxFQUFtQkgsS0FBS0ksS0FBeEIsQ0FBaEI7QUFDQSxVQUFNQyxPQUFPLE1BQU1ILFFBQVFJLFlBQVIsQ0FBcUJMLFVBQXJCLEVBQWlDLENBQUNGLElBQUlRLFVBQXRDLENBQW5COztBQUVBQyxZQUFRQyxHQUFSLENBQVksMkNBQVo7QUFDQSxXQUFPSixJQUFQO0FBQ0QsRzs7a0JBVGNLLE87Ozs7O0FBSmY7Ozs7QUFDQTs7QUFDQTs7Ozs7O0FBYUEsb0JBQ0dDLFdBREgsQ0FDZSw0SEFEZixFQUVHQyxNQUZILENBR0ksYUFISixFQUlJLHVFQUpKLEVBTUdBLE1BTkgsQ0FPSSxpQkFQSixFQVFJLG1CQVJKLEVBVUdBLE1BVkgsQ0FXSSxnQkFYSixFQVlJLDhGQVpKLEVBY0dDLEtBZEgsQ0FjU0MsUUFBUUMsSUFkakI7O0FBZ0JBTCIsImZpbGUiOiJnbGNpLXNldEFsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5pbXBvcnQgcHJvZ3JhbSBmcm9tICdjb21tYW5kZXInO1xuaW1wb3J0IHsgZ2V0Q29uZiwgZ2V0UHJvcGVydGllcyB9IGZyb20gJy4vbGliL3V0aWxzJztcbmltcG9ydCBnaXRsYWJDSSBmcm9tICcuL2xpYi9naXRsYWItY2knO1xuXG5hc3luYyBmdW5jdGlvbiBleGVjdXRlKGNtZCkge1xuICBjb25zdCBjb25mID0gYXdhaXQgZ2V0Q29uZigpO1xuXG4gIGNvbnN0IHByb3BlcnRpZXMgPSBnZXRQcm9wZXJ0aWVzKCk7XG4gIGNvbnN0IGhhbmRsZXIgPSBnaXRsYWJDSShjb25mLnVybCwgY29uZi50b2tlbik7XG4gIGNvbnN0IHJlc3AgPSBhd2FpdCBoYW5kbGVyLnNldFZhcmlhYmxlcyhwcm9wZXJ0aWVzLCAhY21kLmRvTm90Rm9yY2UpO1xuXG4gIGNvbnNvbGUubG9nKCdDb21wbGV0ZWQgc2V0dGluZyB2YXJpYWJsZXMgb24gR2l0bGFiIENJLicpO1xuICByZXR1cm4gcmVzcDtcbn1cblxucHJvZ3JhbVxuICAuZGVzY3JpcHRpb24oJ1JlYWQgYWxsIGtleS92YWx1ZSBwYWlycyB1bmRlciBnaXRsYWIuZW52LnltbCBvbiB0aGUgY3VycmVudCBkaXJlY3RvcnkgYW5kIHNldHMgdGhlbSBhcyBlbnZpcm9ubWVudCB2YXJpYWJsZXMgb24gR2l0bGFiIENJJylcbiAgLm9wdGlvbihcbiAgICAnLS11cmwgPHVybD4nLFxuICAgICdZb3VyIEdpdGxhYiBwcm9qZWN0IFVSTCwgZS5nLiBodHRwczovL2dpdGxhYi5jb20vZ2l0bGFiLW9yZy9naXRsYWItY2UnLFxuICApXG4gIC5vcHRpb24oXG4gICAgJy0tdG9rZW4gPHRva2VuPicsXG4gICAgJ1lvdXIgR2l0bGFiIHRva2VuJyxcbiAgKVxuICAub3B0aW9uKFxuICAgICctLWRvLW5vdC1mb3JjZScsXG4gICAgJ0lnbm9yZSB2YXJpYWJsZXMgaWYgdGhleSBhbHJlYWR5IGV4aXN0IG9uIGdpdGxhYiBDSS4gQnkgZGVmYXVsdCBhbGwgdmFyaWFibGVzIGFyZSBvdmVycmlkZGVuJyxcbiAgKVxuICAucGFyc2UocHJvY2Vzcy5hcmd2KTtcblxuZXhlY3V0ZShwcm9ncmFtKTtcbiJdfQ==