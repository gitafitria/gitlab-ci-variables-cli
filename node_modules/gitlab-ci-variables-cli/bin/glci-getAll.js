#!/usr/bin/env node
'use strict';

var _bluebird = require('bluebird');

let execute = (() => {
  var _ref = (0, _bluebird.coroutine)(function* () {
    const conf = yield (0, _utils.getConf)();

    const handler = (0, _gitlabCi2.default)(conf.url, conf.token);
    const resp = yield handler.listVariables();

    console.log('Downloaded variables from Gitlab CI.');

    (0, _propertiesFile.savePropertiesFile)(`${process.cwd()}/${conf.output}`, resp);

    console.log(`Saved variables to ${conf.output}`);

    return resp;
  });

  return function execute() {
    return _ref.apply(this, arguments);
  };
})();

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _utils = require('./lib/utils');

var _propertiesFile = require('./lib/properties-file');

var _gitlabCi = require('./lib/gitlab-ci');

var _gitlabCi2 = _interopRequireDefault(_gitlabCi);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander2.default.description('Read all key/value pairs from Gitlab API and save them to the specified output file').option('--url <url>', 'Your Gitlab project URL, e.g. https://gitlab.com/gitlab-org/gitlab-ce').option('--token <token>', 'Your Gitlab token').option('--output <output>', 'The location to save the result to', 'gitlab.env.yml').parse(process.argv);

execute(_commander2.default);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9nbGNpLWdldEFsbC5qcyJdLCJuYW1lcyI6WyJjb25mIiwiaGFuZGxlciIsInVybCIsInRva2VuIiwicmVzcCIsImxpc3RWYXJpYWJsZXMiLCJjb25zb2xlIiwibG9nIiwicHJvY2VzcyIsImN3ZCIsIm91dHB1dCIsImV4ZWN1dGUiLCJkZXNjcmlwdGlvbiIsIm9wdGlvbiIsInBhcnNlIiwiYXJndiJdLCJtYXBwaW5ncyI6Ijs7Ozs7c0NBT0EsYUFBeUI7QUFDdkIsVUFBTUEsT0FBTyxNQUFNLHFCQUFuQjs7QUFFQSxVQUFNQyxVQUFVLHdCQUFTRCxLQUFLRSxHQUFkLEVBQW1CRixLQUFLRyxLQUF4QixDQUFoQjtBQUNBLFVBQU1DLE9BQU8sTUFBTUgsUUFBUUksYUFBUixFQUFuQjs7QUFFQUMsWUFBUUMsR0FBUixDQUFZLHNDQUFaOztBQUVBLDRDQUFvQixHQUFFQyxRQUFRQyxHQUFSLEVBQWMsSUFBR1QsS0FBS1UsTUFBTyxFQUFuRCxFQUFzRE4sSUFBdEQ7O0FBRUFFLFlBQVFDLEdBQVIsQ0FBYSxzQkFBcUJQLEtBQUtVLE1BQU8sRUFBOUM7O0FBRUEsV0FBT04sSUFBUDtBQUNELEc7O2tCQWJjTyxPOzs7OztBQUxmOzs7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQWlCQSxvQkFDR0MsV0FESCxDQUNlLHFGQURmLEVBRUdDLE1BRkgsQ0FHSSxhQUhKLEVBSUksdUVBSkosRUFNR0EsTUFOSCxDQU9JLGlCQVBKLEVBUUksbUJBUkosRUFVR0EsTUFWSCxDQVdJLG1CQVhKLEVBWUksb0NBWkosRUFhSSxnQkFiSixFQWVHQyxLQWZILENBZVNOLFFBQVFPLElBZmpCOztBQWlCQUoiLCJmaWxlIjoiZ2xjaS1nZXRBbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcblxuaW1wb3J0IHByb2dyYW0gZnJvbSAnY29tbWFuZGVyJztcbmltcG9ydCB7IGdldENvbmYgfSBmcm9tICcuL2xpYi91dGlscyc7XG5pbXBvcnQgeyBzYXZlUHJvcGVydGllc0ZpbGUgfSBmcm9tICcuL2xpYi9wcm9wZXJ0aWVzLWZpbGUnO1xuaW1wb3J0IGdpdGxhYkNJIGZyb20gJy4vbGliL2dpdGxhYi1jaSc7XG5cbmFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGUoKSB7XG4gIGNvbnN0IGNvbmYgPSBhd2FpdCBnZXRDb25mKCk7XG5cbiAgY29uc3QgaGFuZGxlciA9IGdpdGxhYkNJKGNvbmYudXJsLCBjb25mLnRva2VuKTtcbiAgY29uc3QgcmVzcCA9IGF3YWl0IGhhbmRsZXIubGlzdFZhcmlhYmxlcygpO1xuXG4gIGNvbnNvbGUubG9nKCdEb3dubG9hZGVkIHZhcmlhYmxlcyBmcm9tIEdpdGxhYiBDSS4nKTtcblxuICBzYXZlUHJvcGVydGllc0ZpbGUoYCR7cHJvY2Vzcy5jd2QoKX0vJHtjb25mLm91dHB1dH1gLCByZXNwKTtcblxuICBjb25zb2xlLmxvZyhgU2F2ZWQgdmFyaWFibGVzIHRvICR7Y29uZi5vdXRwdXR9YCk7XG5cbiAgcmV0dXJuIHJlc3A7XG59XG5cbnByb2dyYW1cbiAgLmRlc2NyaXB0aW9uKCdSZWFkIGFsbCBrZXkvdmFsdWUgcGFpcnMgZnJvbSBHaXRsYWIgQVBJIGFuZCBzYXZlIHRoZW0gdG8gdGhlIHNwZWNpZmllZCBvdXRwdXQgZmlsZScpXG4gIC5vcHRpb24oXG4gICAgJy0tdXJsIDx1cmw+JyxcbiAgICAnWW91ciBHaXRsYWIgcHJvamVjdCBVUkwsIGUuZy4gaHR0cHM6Ly9naXRsYWIuY29tL2dpdGxhYi1vcmcvZ2l0bGFiLWNlJyxcbiAgKVxuICAub3B0aW9uKFxuICAgICctLXRva2VuIDx0b2tlbj4nLFxuICAgICdZb3VyIEdpdGxhYiB0b2tlbicsXG4gIClcbiAgLm9wdGlvbihcbiAgICAnLS1vdXRwdXQgPG91dHB1dD4nLFxuICAgICdUaGUgbG9jYXRpb24gdG8gc2F2ZSB0aGUgcmVzdWx0IHRvJyxcbiAgICAnZ2l0bGFiLmVudi55bWwnLFxuICApXG4gIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG5leGVjdXRlKHByb2dyYW0pO1xuIl19