'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bluebird = require('bluebird');

exports.default = gitlabCI;

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _urlParse = require('url-parse');

var _urlParse2 = _interopRequireDefault(_urlParse);

var _isPrimitive = require('is-primitive');

var _isPrimitive2 = _interopRequireDefault(_isPrimitive);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Provides utility functions to simplify interacting with a GitLab CI project through the API
 *
 * @param {string} url
 * @param {string} token
 *
 * @return {object} utility functions wrapped in an object
 */
function gitlabCI(url, token) {

  /**
   * Create project variable
   *
   * @param key
   * @param value
   *
   * @return {Promise<Object>} variable object
   */
  let createVariable = (() => {
    var _ref = (0, _bluebird.coroutine)(function* (key, value) {
      const response = yield (0, _axios2.default)({
        method: 'post',
        url: `${apiUrl}?${tokenQueryString}`,
        data: {
          key,
          value: serialiseValue(value)
        }
      });

      console.log(`Created new variable ${key} = ${JSON.stringify(value)}`);

      return response.data;
    });

    return function createVariable(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  })();

  /**
   * Update project variable
   *
   * @param key
   * @param value
   *
   * @return {Promise<Object>} variable object
   */


  let updateVariable = (() => {
    var _ref2 = (0, _bluebird.coroutine)(function* (key, value) {
      const response = yield (0, _axios2.default)({
        method: 'put',
        url: `${apiUrl}/${key}?${tokenQueryString}`,
        data: {
          key,
          value: serialiseValue(value)
        }
      });

      console.log(`Updated variable ${key} = ${JSON.stringify(value)}`);

      return response.data;
    });

    return function updateVariable(_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  })();

  /**
   * Get all variables for project
   *
   * @return {Promise<Array>} array of variable objects
   */


  let listVariables = (() => {
    var _ref3 = (0, _bluebird.coroutine)(function* () {
      const response = yield _axios2.default.get(`${apiUrl}?${tokenQueryString}&${perPageQueryString}`);

      return response.data;
    });

    return function listVariables() {
      return _ref3.apply(this, arguments);
    };
  })();

  /**
   * Set project variables
   *
   * @param {Object} properties
   * @param forceUpdate if true, override existing values, otherwise ignore them
   *
   * @return {Promise<Array>} array of variable objects
   */


  let setVariables = (() => {
    var _ref4 = (0, _bluebird.coroutine)(function* (properties, forceUpdate) {
      if (!properties) {
        return null;
      }

      const existingKeys = (yield listVariables()).map(function (variable) {
        return variable.key;
      });
      const keysToSet = Object.keys(properties);

      const promises = keysToSet.map((() => {
        var _ref5 = (0, _bluebird.coroutine)(function* (key) {
          const value = properties[key];
          const keyExists = existingKeys.includes(key);

          if (keyExists && !forceUpdate) {
            console.log(`Skipped variable ${key}, already set for project.`);
            return undefined;
          }

          let variable;
          if (keyExists) {
            // Update variable
            variable = yield updateVariable(key, value);
          } else {
            // Create variable
            variable = yield createVariable(key, value);
          }

          return variable;
        });

        return function (_x7) {
          return _ref5.apply(this, arguments);
        };
      })());

      const variables = yield Promise.all(promises);

      return variables.filter(function (variable) {
        return variable;
      });
    });

    return function setVariables(_x5, _x6) {
      return _ref4.apply(this, arguments);
    };
  })();

  const parsedUrl = new _urlParse2.default(url);
  const perPageDefault = 100;

  // Construct project id by encoding namespace/projectName
  const projectId = parsedUrl.pathname.split('/').filter(x => x).join('%2F');

  const apiUrl = `${parsedUrl.origin}/api/v4/projects/${projectId}/variables`;
  const tokenQueryString = `private_token=${token}`;
  const perPageQueryString = `per_page=${perPageDefault}`;

  /**
   * Will serialise a value using `JSON.stringify` if it is not primative.
   *
   * @param {any} value
   * @return {string|number|boolean}
   */
  function serialiseValue(value) {
    if (!(0, _isPrimitive2.default)(value)) {
      return JSON.stringify(value);
    }

    return value;
  }

  return {
    createVariable,
    updateVariable,
    listVariables,
    setVariables
  };
}
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9saWIvZ2l0bGFiLWNpLmpzIl0sIm5hbWVzIjpbImdpdGxhYkNJIiwidXJsIiwidG9rZW4iLCJrZXkiLCJ2YWx1ZSIsInJlc3BvbnNlIiwibWV0aG9kIiwiYXBpVXJsIiwidG9rZW5RdWVyeVN0cmluZyIsImRhdGEiLCJzZXJpYWxpc2VWYWx1ZSIsImNvbnNvbGUiLCJsb2ciLCJKU09OIiwic3RyaW5naWZ5IiwiY3JlYXRlVmFyaWFibGUiLCJ1cGRhdGVWYXJpYWJsZSIsImdldCIsInBlclBhZ2VRdWVyeVN0cmluZyIsImxpc3RWYXJpYWJsZXMiLCJwcm9wZXJ0aWVzIiwiZm9yY2VVcGRhdGUiLCJleGlzdGluZ0tleXMiLCJtYXAiLCJ2YXJpYWJsZSIsImtleXNUb1NldCIsIk9iamVjdCIsImtleXMiLCJwcm9taXNlcyIsImtleUV4aXN0cyIsImluY2x1ZGVzIiwidW5kZWZpbmVkIiwidmFyaWFibGVzIiwiUHJvbWlzZSIsImFsbCIsImZpbHRlciIsInNldFZhcmlhYmxlcyIsInBhcnNlZFVybCIsInBlclBhZ2VEZWZhdWx0IiwicHJvamVjdElkIiwicGF0aG5hbWUiLCJzcGxpdCIsIngiLCJqb2luIiwib3JpZ2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztrQkFZd0JBLFE7O0FBWnhCOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBRUE7Ozs7Ozs7O0FBUWUsU0FBU0EsUUFBVCxDQUFrQkMsR0FBbEIsRUFBdUJDLEtBQXZCLEVBQThCOztBQTRCM0M7Ozs7Ozs7O0FBNUIyQztBQUFBLHdDQW9DM0MsV0FBOEJDLEdBQTlCLEVBQW1DQyxLQUFuQyxFQUEwQztBQUN4QyxZQUFNQyxXQUFXLE1BQU0scUJBQU07QUFDM0JDLGdCQUFRLE1BRG1CO0FBRTNCTCxhQUFNLEdBQUVNLE1BQU8sSUFBR0MsZ0JBQWlCLEVBRlI7QUFHM0JDLGNBQU07QUFDSk4sYUFESTtBQUVKQyxpQkFBT00sZUFBZU4sS0FBZjtBQUZIO0FBSHFCLE9BQU4sQ0FBdkI7O0FBU0FP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cEMsU0FBVSxHQUFFOEIsVUFBVU8sTUFBTyxvQkFBbUJMLFNBQVUsWUFBaEU7QUFDQSxRQUFNL0IsbUJBQW9CLGlCQUFnQk4sS0FBTSxFQUFoRDtBQUNBLFFBQU1nQixxQkFBc0IsWUFBV29CLGNBQWUsRUFBdEQ7O0FBRUE7Ozs7OztBQU1BLFdBQVM1QixjQUFULENBQXdCTixLQUF4QixFQUErQjtBQUM3QixRQUFJLENBQUMsMkJBQVlBLEtBQVosQ0FBTCxFQUF5QjtBQUN2QixhQUFPUyxLQUFLQyxTQUFMLENBQWVWLEtBQWYsQ0FBUDtBQUNEOztBQUVELFdBQU9BLEtBQVA7QUFDRDs7QUFxR0QsU0FBTztBQUNMVyxrQkFESztBQUVMQyxrQkFGSztBQUdMRyxpQkFISztBQUlMaUI7QUFKSyxHQUFQO0FBTUQiLCJmaWxlIjoiZ2l0bGFiLWNpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBVUkwgZnJvbSAndXJsLXBhcnNlJztcbmltcG9ydCBpc1ByaW1pdGl2ZSBmcm9tICdpcy1wcmltaXRpdmUnO1xuXG4vKipcbiAqIFByb3ZpZGVzIHV0aWxpdHkgZnVuY3Rpb25zIHRvIHNpbXBsaWZ5IGludGVyYWN0aW5nIHdpdGggYSBHaXRMYWIgQ0kgcHJvamVjdCB0aHJvdWdoIHRoZSBBUElcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gKiBAcGFyYW0ge3N0cmluZ30gdG9rZW5cbiAqXG4gKiBAcmV0dXJuIHtvYmplY3R9IHV0aWxpdHkgZnVuY3Rpb25zIHdyYXBwZWQgaW4gYW4gb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdpdGxhYkNJKHVybCwgdG9rZW4pIHtcbiAgY29uc3QgcGFyc2VkVXJsID0gbmV3IFVSTCh1cmwpO1xuICBjb25zdCBwZXJQYWdlRGVmYXVsdCA9IDEwMDtcblxuICAvLyBDb25zdHJ1Y3QgcHJvamVjdCBpZCBieSBlbmNvZGluZyBuYW1lc3BhY2UvcHJvamVjdE5hbWVcbiAgY29uc3QgcHJvamVjdElkID0gcGFyc2VkVXJsLnBhdGhuYW1lXG4gICAgLnNwbGl0KCcvJylcbiAgICAuZmlsdGVyKHggPT4geClcbiAgICAuam9pbignJTJGJyk7XG5cbiAgY29uc3QgYXBpVXJsID0gYCR7cGFyc2VkVXJsLm9yaWdpbn0vYXBpL3Y0L3Byb2plY3RzLyR7cHJvamVjdElkfS92YXJpYWJsZXNgO1xuICBjb25zdCB0b2tlblF1ZXJ5U3RyaW5nID0gYHByaXZhdGVfdG9rZW49JHt0b2tlbn1gO1xuICBjb25zdCBwZXJQYWdlUXVlcnlTdHJpbmcgPSBgcGVyX3BhZ2U9JHtwZXJQYWdlRGVmYXVsdH1gO1xuXG4gIC8qKlxuICAgKiBXaWxsIHNlcmlhbGlzZSBhIHZhbHVlIHVzaW5nIGBKU09OLnN0cmluZ2lmeWAgaWYgaXQgaXMgbm90IHByaW1hdGl2ZS5cbiAgICpcbiAgICogQHBhcmFtIHthbnl9IHZhbHVlXG4gICAqIEByZXR1cm4ge3N0cmluZ3xudW1iZXJ8Ym9vbGVhbn1cbiAgICovXG4gIGZ1bmN0aW9uIHNlcmlhbGlzZVZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKCFpc1ByaW1pdGl2ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBwcm9qZWN0IHZhcmlhYmxlXG4gICAqXG4gICAqIEBwYXJhbSBrZXlcbiAgICogQHBhcmFtIHZhbHVlXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0Pn0gdmFyaWFibGUgb2JqZWN0XG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBjcmVhdGVWYXJpYWJsZShrZXksIHZhbHVlKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcyh7XG4gICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgIHVybDogYCR7YXBpVXJsfT8ke3Rva2VuUXVlcnlTdHJpbmd9YCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAga2V5LFxuICAgICAgICB2YWx1ZTogc2VyaWFsaXNlVmFsdWUodmFsdWUpLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKGBDcmVhdGVkIG5ldyB2YXJpYWJsZSAke2tleX0gPSAke0pTT04uc3RyaW5naWZ5KHZhbHVlKX1gKTtcblxuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBwcm9qZWN0IHZhcmlhYmxlXG4gICAqXG4gICAqIEBwYXJhbSBrZXlcbiAgICogQHBhcmFtIHZhbHVlXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0Pn0gdmFyaWFibGUgb2JqZWN0XG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiB1cGRhdGVWYXJpYWJsZShrZXksIHZhbHVlKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcyh7XG4gICAgICBtZXRob2Q6ICdwdXQnLFxuICAgICAgdXJsOiBgJHthcGlVcmx9LyR7a2V5fT8ke3Rva2VuUXVlcnlTdHJpbmd9YCxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAga2V5LFxuICAgICAgICB2YWx1ZTogc2VyaWFsaXNlVmFsdWUodmFsdWUpLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnNvbGUubG9nKGBVcGRhdGVkIHZhcmlhYmxlICR7a2V5fSA9ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCB2YXJpYWJsZXMgZm9yIHByb2plY3RcbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxBcnJheT59IGFycmF5IG9mIHZhcmlhYmxlIG9iamVjdHNcbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIGxpc3RWYXJpYWJsZXMoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoYCR7YXBpVXJsfT8ke3Rva2VuUXVlcnlTdHJpbmd9JiR7cGVyUGFnZVF1ZXJ5U3RyaW5nfWApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHByb2plY3QgdmFyaWFibGVzXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wZXJ0aWVzXG4gICAqIEBwYXJhbSBmb3JjZVVwZGF0ZSBpZiB0cnVlLCBvdmVycmlkZSBleGlzdGluZyB2YWx1ZXMsIG90aGVyd2lzZSBpZ25vcmUgdGhlbVxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5Pn0gYXJyYXkgb2YgdmFyaWFibGUgb2JqZWN0c1xuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gc2V0VmFyaWFibGVzKHByb3BlcnRpZXMsIGZvcmNlVXBkYXRlKSB7XG4gICAgaWYgKCFwcm9wZXJ0aWVzKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBleGlzdGluZ0tleXMgPSAoYXdhaXQgbGlzdFZhcmlhYmxlcygpKS5tYXAodmFyaWFibGUgPT4gdmFyaWFibGUua2V5KTtcbiAgICBjb25zdCBrZXlzVG9TZXQgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKTtcblxuICAgIGNvbnN0IHByb21pc2VzID0ga2V5c1RvU2V0Lm1hcChhc3luYyAoa2V5KSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHByb3BlcnRpZXNba2V5XTtcbiAgICAgIGNvbnN0IGtleUV4aXN0cyA9IGV4aXN0aW5nS2V5cy5pbmNsdWRlcyhrZXkpO1xuXG4gICAgICBpZiAoa2V5RXhpc3RzICYmICFmb3JjZVVwZGF0ZSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgU2tpcHBlZCB2YXJpYWJsZSAke2tleX0sIGFscmVhZHkgc2V0IGZvciBwcm9qZWN0LmApO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBsZXQgdmFyaWFibGU7XG4gICAgICBpZiAoa2V5RXhpc3RzKSB7XG4gICAgICAgIC8vIFVwZGF0ZSB2YXJpYWJsZVxuICAgICAgICB2YXJpYWJsZSA9IGF3YWl0IHVwZGF0ZVZhcmlhYmxlKGtleSwgdmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ3JlYXRlIHZhcmlhYmxlXG4gICAgICAgIHZhcmlhYmxlID0gYXdhaXQgY3JlYXRlVmFyaWFibGUoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YXJpYWJsZTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHZhcmlhYmxlcyA9IGF3YWl0IFByb21pc2UuYWxsKHByb21pc2VzKTtcblxuICAgIHJldHVybiB2YXJpYWJsZXMuZmlsdGVyKHZhcmlhYmxlID0+IHZhcmlhYmxlKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlVmFyaWFibGUsXG4gICAgdXBkYXRlVmFyaWFibGUsXG4gICAgbGlzdFZhcmlhYmxlcyxcbiAgICBzZXRWYXJpYWJsZXMsXG4gIH07XG59XG4iXX0=